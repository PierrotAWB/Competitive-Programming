# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
# 2016-12-30

import time
t = time.time()
triangleList = []
target = 500

def createTriangleList(lowerBound, delta):
	for i in range(lowerBound, lowerBound + delta + 1):
		triangleList.append(i * (i + 1) / 2)

	return triangleList

def countDivisors(n):
	counter = 0

	for i in range(1, int(n ** 0.5) + 1):
		if float(n) / float(i) == float(i): 
			counter += 1
		elif n % i == 0: 
			counter += 2

	return counter

createTriangleList(10100, 10000)

for i in range(0, len(triangleList)):
	if countDivisors(triangleList[i]) > target: 
		print triangleList[i]
		break
else:
	print "No such number in this range!"

print time.time() - t

# prime factorization should be avoided where possible
# especially if the input consists of enormous numbers.

